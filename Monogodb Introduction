### 第一章 简介
##### 什么是MongoDB?
MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。在高负载的情况下，添加更多的节点，可以保证服务器性能。

MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。

MongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。
##### MongoDB下载
你可以在mongodb官网下载该安装包，地址为：https://www.mongodb.com/download-center#community。
MonggoDB支持以下平台:

##### MongoDB连接
> mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]

* mongodb:// 这是固定的格式，必须要指定。
* username:password@ 可选项，如果设置，在连接数据库服务器之后，驱动都会尝试登陆这个数据库
* host1 必须的指定至少一个host, host1 是这个URI唯一要填写的。它指定了要连接服务器的地址。如果要连接复制集，请指定多个主机地址。
* portX 可选的指定端口，如果不填，默认为27017
* /database 如果指定username:password@，连接并验证登陆指定数据库。若不指定，默认打开 test 数据库。
* ?options 是连接选项。如果不使用/database，则前面需要加上/。所有连接选项都是键值对name=value，键值对之间通过&或;（分号）隔开 

##### 更多连接实例
1. 连接本地数据库服务器，端口是默认的。
   > mongodb://localhost
2. 使用用户名fred，密码foobar登录localhost的admin数据库
   > mongodb://fred:foobar@localhost
3. 使用用户名fred，密码foobar登录localhost的baz数据库。
   > mongodb://fred:foobar@localhost/baz
4. 连接 replica set 三台服务器 (端口 27017, 27018, 和27019):
   > mongodb://localhost,localhost:27018,localhost:27019 q
5. 连接 replica set 三台服务器,写入操作应用在主服务器并且分布查询到从服务器。
   > mongodb://host1,host2,host3/?slaveOk=true
6. 直接连接第一个服务器，无论是replica set一部分或者主服务器或者从服务器。
   > mongodb://host1,host2,host3/?connect=direct;slaveOk=true
7. 以安全模式连接到replica set，并且等待至少两个复制服务器成功写入，超时时间设置为2秒。
   > mongodb://host1,host2,host3/?safe=true;w=2;wtimeoutMS=2000

### 第二章 MongoDB的CRUD操作
#### 2.1 创建数据库
> use DATABASE_NAME

如果数据库不存在，则创建数据库，否则切换到指定数据库。如果你想查看所有数据库，可以使用 **show dbs** 命令。
#### 2.2 数据库删除
> db.dropDatabase()

删除当前数据库，默认为 test，你可以使用 db 命令查看当前数据库名。

##### 创建集合
> db.createCollection(Name)

##### 删除集合
> db.collection.drop()

其中collection为集合的名字

#### 2.3 插入文档
MongoDB 使用 insert() 或 save() 方法向集合中插入文档，语法如下：
> db.COLLECTION_NAME.insert|save(document)

如果该集合(COLLECTION_NAME)不在该数据库中， MongoDB 会自动创建该集合并插入文档。插入完成后，可以通过如下命令查看插入的文档。
> db.COLLECTION_NAME find()

还能执行单条和多条数据的插入
> db.collection.insertOne():向指定集合中插入一条文档数据\
> db.collection.insertMany():向指定集合中插入多条文档数据

#### 2.4 更新文档
**uddate() 方法**
<pre>db.collection.update(
   <query>,
   <update>,
   {
     upsert: <boolean>,
     multi: <boolean>,
     writeConcern: <document>
   }
)
</pre>

参数说明：
* **query** : update的查询条件，类似sql update查询内where后面的。
* **update** : update的对象和一些更新的操作符（如$,$inc[增加],$set[设置]...）等，也可以理解为sql update查询内set后面的。
* **upsert** : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。
* **multi** : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。
* **writeConcern** :可选，抛出异常的级别。

**save() 方法**

save() 方法通过传入的文档来替换已有文档。语法格式如下：
<pre>
db.collection.save(
   <document>,
   {
     writeConcern: <document>
   }
)
</pre>
参数说明：
* **document** : 文档数据。
* **writeConcern** :可选，抛出异常的级别。

#### 2.5 删除文档
MongoDB remove()函数是用来移除集合中的数据，其语法格式如下。
<pre>
    db.collection.remove(
   <query>,
   {
     justOne: <boolean>,
     writeConcern: <document>
   }
)
</pre>
参数说明：
* **query** :（可选）删除的文档的条件。
* **justOne** : （可选）如果设为 true 或 1，则只删除一个文档。
* **writeConcern** :（可选）抛出异常的级别。

#### 2.6 查询文档
MongoDB 查询文档使用find()方法
> db.collection_name.find(query,projection)

参数说明：
* query 查询条件，可选。
* 可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。

对于数据可以格式化输出显示。
> db.collection_name.find().pretty()

MongoDB 与 RDBMS Where 条件查询比较
操作 | 格式 | 实例 | 对应SQL语句
---|---|---|---
等于 | {<key> : <value> } | db.col.find({"by":"菜鸟教程"}).pretty() |where by = '菜鸟教程'
大于 | {<key> : {$gt : <value>}} |  db.col.find({"likes":{$gt:50}}).pretty() | where likes > 50
小于 |  {<key> : {$lt : <value>} | db.col.find({"likes":{$lt:50}}).pretty() | where likes < 50
大于等于 | {<key>:{$gte:<value>}} | db.col.find({"likes":{$gte:50}}).pretty() | where likes >= 50
小于等于 | {<key>:{$lte:<value>}} | db.col.find({"likes":{$lte:50}}).pretty() | where likes <= 50
不等于 | {<key>:{$ne:<value>}} | db.col.find({"likes":{$ne:50}}).pretty() |where likes != 50

##### MongoDB AND 查询
MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，及常规 SQL 的 AND 条件。
> db.col.find({key1:value1, key2:value2}).pretty()

##### MongoDB OR 查询
MongoDB OR 条件语句使用了关键字 $or,语法格式如下：
<pre>
>db.col.find(
   {
      $or: [
         {key1: value1}, {key2:value2}
      ]
   }
).pretty()
</pre>
> 

##### MongoDB Limit()查询：
> \> db.COLLECTION_NAME.find().limit(NUMBER)

**NUMBER**：为指定查询显示的记录数量

##### MongoDB Skip()查询：
> \> db.COLLECTION_NAME.find().skip(NUMBER)

**NUMBER**：为指定跳过查询的记录条数，从跳过指定数目的记录后开始查询。

##### MongoDB sort()排序查询：
在MongoDB中使用使用sort()方法对数据进行排序，sort()方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而-1是用于降序排列。
> \> db.COLLECTION_NAME.find().sort({KEY:1})

#### 2.7 MongODB 数据备份和还原

##### 数据备份
在Mongodb中我们使用**mongodump**命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。\
**mongodump**命令可以通过参数指定导出的数据量级转存的服务器。
> mongodump -h dbhost -d dbname -o dbdirectory

* **-h** 主机名
* **-d**  要备份的数据库名字
* **-o** 备份后数据存贮的位置

##### 数据还原
mongodb使用 **mongorestore** 命令来恢复备份的数据。
> mongorestore -h <hostname><:port> -d dbname <path>

#### 2.8 MongoDB监控
&emsp;&emsp;在你已经安装部署并允许MongoDB服务后，你必须要了解MongoDB的运行情况，并查看MongoDB的性能。这样在大流量得情况下可以很好的应对并保证MongoDB正常运作。MongoDB中提供了**mongostat** 和**mongotop** 两个命令来监控MongoDB的运行情况。
> D:\set up\mongodb\bin>mongostat

> D:\set up\mongodb\bin>mongotop

### 第三章 MongoDB 高级教程
#### 3.1 MongoDB 原子操作
&emsp;&emsp;mongodb不支持事务，所以，在你的项目中应用时，要注意这点。无论什么设计，都不要要求mongodb保证数据的完整性。

&emsp;&emsp;但是mongodb提供了许多原子操作，比如文档的保存，修改，删除等，都是原子操作。

&emsp;&emsp;所谓原子操作就是要么这个文档保存到Mongodb，要么没有保存到Mongodb，不会出现查询到的文档没有保存完整的情况。

#### 3.2 MongoDB 正则查找
> db.collection_name.find(field:{$regx:"对应正则表达式"})

#### 3.3 Monogodb 管理工具Rockmongo
RockMongo是PHP5写的一个MongoDB管理工具。通过 Rockmongo 你可以管理 MongoDB服务，数据库，集合，文档，索引等等。它提供了非常人性化的操作。类似 phpMyAdmin（PHP开发的MySql管理工具）。

下载地址：[Rockmongo下载](http://rockmongo.com/downloads)

